题目描述
如果将课本上的Hanoi塔问题稍做修改：仍然是给定N只盘子，3根柱子，但是允许每次最多移动相邻的M只盘子（当然移动盘子的数目也可以小于M）,最少需要多少次？
例如N=5，M=2时，可以分别将最小的2个盘子、中间的2个盘子以及最大的一个盘子分别看作一个整体，这样可以转变为N=3，M=1的情况，共需要移动7次。
输入
输入数据仅有一行，包括两个数N和M（0< =M< =N< =8） 
输出
仅输出一个数，表示需要移动的最少次数 
样例输入
5 2
样例输出
7

代码：
import java.util.Scanner;
public class Hanoi问题 {
	static int ans=0;
	public static void main(String[] args) {
		Scanner input=new Scanner(System.in);
		int n=input.nextInt();
		int m=input.nextInt();
		if(n%m==0) {
			n=n/m;
		}else {
			n=n/m+1;
		}
		move(n,'a','b','c');
		System.out.println(ans);
	}
	static void move(int n,char a,char b,char c) {
		if(n==0) {
			return;
		}
		move(n-1,a,c,b);
		ans++;
		move(n-1,b,a,c);
	}
}
