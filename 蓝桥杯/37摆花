题目描述
小明的花店新开张，为了吸引顾客，他想在花店的门口摆上一排花，共m盆。通过调查顾客的喜好，小明列出了顾客最喜欢的n种花，从1到n标号。为了在门口展出更多种花，规定第i种花不能超过ai盆，摆花时同一种花放在一起，且不同种类的花需按标号的从小到大的顺序依次摆列。
试编程计算，一共有多少种不同的摆花方案。

样例说明

有2种摆花的方案，分别是(1，1，1，2)，  (1，1，2，2)。括号里的1和2表示两种花，比如第一个方案是前三个位置摆第一种花，第四个位置摆第二种花。
数据规模和约定
对于100%数据，有0< n≤100，0< m≤100，0≤  ai≤100。

输入
第一行包含两个正整数n和m，中间用一个空格隔开。 
第二行有n个整数，每两个整数之间用一个空格隔开，依次表示a1、a2、……an。 
输出
输出只有一行，一个整数，表示有多少种方案。注意：因为方案数可能很多，请输出方案数对1000007取模的结果。
样例输入
2  4 
3  2 
样例输出
2

思路分析：
f[i][j]表示有i种花，能摆j盆花的方案数目

num[i]表示第i种花最多摆放的盆数
故第i种花可以摆放0,1,2…num[i]盆

此时对前i-1种花，能摆花的盆数可为j-0，j-1，j-2，…，j-num[i]

故此时的方案数，为这些情况方案数的总和

状态转移方程：
f[i][j]=f[i-1][j-0]+f[i-1][j-1]+…+f[i-1][j-num[i]]

即f[i][j]=∑f[i-1][j-k] (k从0到num[i],且j>=k)

赋初值：
i=1时，即只有1种花时，不管j为多少，都只有一种摆法
即f[1][0]=1，f[1][1]=1，…，f[1][num[1]]=1

j=0时，即可摆放花盆的数目为0，此时无论有几种花，都只有1种摆法
即 f[i][0]=1 (1<=i<=n)

代码：
public class Main {
	public static void main(String[] args) {
		Scanner input=new Scanner(System.in);
		int[][] f=new int[105][105];
		int[] a=new int[105];
		int n=input.nextInt();
		int m=input.nextInt();
		for(int i=1;i<=n;i++) {
			a[i]=input.nextInt();
		}
		f[0][0]=1;
		for(int i=1;i<=n;i++) {
			for(int j=0;j<=m;j++) {
				for(int k=0;k<=a[i]&&k<=j;k++) {
					f[i][j]=(f[i][j]+f[i-1][j-k])%1000007;
				}
			}
		}
		System.out.println(f[n][m]%1000007);
	}
}
