题目描述
幸运数是波兰数学家乌拉姆命名的。它采用与生成素数类似的“筛法”生成
。 
首先从1开始写出自然数1,2,3,4,5,6,....
1  就是第一个幸运数。
我们从2这个数开始。把所有序号能被2整除的项删除，变为：
1  _  3  _  5  _  7  _  9  ....
把它们缩紧，重新记序，为：
1  3  5  7  9  ....  。这时，3为第2个幸运数，然后把所有能被3整除的序号位置的数删去。注意，是序号位置，不是那个数本身能否被3整除!!  删除的应该是5，11,  17,  ...
此时7为第3个幸运数，然后再删去序号位置能被7整除的(19,39,...)
最后剩下的序列类似：
1,  3,  7,  9,  13,  15,  21,  25,  31,  33,  37,  43,  49,  51,  63,  67,  69,  73,  75,  79,  ...
输入
输入两个正整数m  n,  用空格分开  (m  <   n  <   1000*1000)  
输出
程序输出  位于m和n之间的幸运数的个数（不包含m和n）。  
样例输入
30  69  
样例输出
8

代码：
public class Main{
	public static void main(String[] args) {
		Scanner input=new Scanner(System.in);
		int m=input.nextInt();
		int n=input.nextInt();
		ArrayList<Integer> list=new ArrayList<Integer>();//建立一个链表，存放最初的数
		list.add(-1); //去掉下标为0
		for(int i=1;i<n;i++) { //此时为，1，3，5，7..
			if(i%2!=0) {
				list.add(i);
			}
		}
		int count=2; 
		while(true) {
			ArrayList<Integer> temp=new ArrayList<Integer>();//建造一个临时链表
			temp.add(-1); //去掉下标为0
			int k=list.get(count); //获取需要剔除的数据的小标,比如第一层的k为3
			for(int i=1;i<list.size();i++) {
				if(i%k==0) {
					continue;
				}else {
					temp.add(list.get(i));
				}
			}
			list=temp;//把list替换成temp
			count++;
			if(count>=list.size()) {
				break;
			}
		}
		int sum=0;
		for(int i=1;i<list.size();i++) {
			if(list.get(i)>m) {
				sum++;
			}
		}
		System.out.println(sum);
	}
}
