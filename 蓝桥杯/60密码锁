题目描述
你获得了一个据说是古代玛雅人制作的箱子。你非常想打开箱子看看里面有什么东西,但是不幸的是,正如所有故事里一样,神秘的箱子出现的时候总是会挂着神秘的锁。
这个锁上面看起来有  N  个数字,它们排成一排,并且每个数字都在  0  到  2  之间。你发现你可以通过锁上的机关来交换相邻两个数字的顺序。比如,如果原来有  5  个数字  02120,在一次交换以后你就可以得到  20120,01220,02210  或者  02102。
根据你所搜集的情报,这个锁在上面存在某连续四个数字是“2012”的时候会自动打开。现在,你需要计算一下,你至少需要进行多少次交换操作才能打开这把锁?

对样例的解释
把前两个数字交换以后,锁上的数字是  20120,其中存在连续四个数字2,  0,  1,  2,因此锁会打开。

输入
输入数据的第一行有一个正整数  N。(4  ≤  N  ≤  13)  输入数据的第二行有  N  个数字  a1,a2,  ...,  aN  ,其中  ai  表示这个锁上面第  i  个数字的值,满足  0  ≤  ai  ≤  2。这些数字之间没有空格分隔。 
输出
你只需要输出一个数字,即你至少需要的交换次数。如果无论如何都没有希望打开这把锁,输出  -1。 
样例输入
5
02120
样例输出
1

代码：
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
public class 密码锁 {
	
	public static void main(String[] args) {
		Scanner input=new Scanner(System.in);
		int n=input.nextInt();
		String s=input.next();
		bfs(s);
		
	}
	static void bfs(String s) {
		Queue<Node> queue=new LinkedList<Node>();
		queue.offer(new Node(s,0));
		char[] ch=s.toCharArray();
		int t0=0,t1=0,t2=0;
		for(int i=0;i<ch.length;i++) {
			if(ch[i]=='0')
                t0++;
            else if(ch[i]=='1')
                t1++;
            else if(ch[i]=='2')
                t2++;
		}
		boolean flag=false;
		if(t0>=1&&t1>=1&&t2>=2) {
			flag=true;
		}else {
			System.out.println("-1");
			return;
		}
		while(!queue.isEmpty()&&flag) {
			Node node=queue.poll();
			if(node.getS().contains("2012")) {
				System.out.println(node.getStep());
				return;
			}
			for(int i=0;i<node.getS().length()-1;i++) {
				char c1=node.getS().charAt(i);
				char c2=node.getS().charAt(i+1);
				if(c1==c2) {
					continue;
				}
				StringBuffer temp=new StringBuffer(node.getS());
				temp.setCharAt(i, c2);
				temp.setCharAt(i+1,c1);
				queue.offer(new Node(String.valueOf(temp),node.getStep()+1));
			}
		}
	} 
}
class Node{
	String s;
	int step;
	public Node(String s, int step) {
		super();
		this.s = s;
		this.step = step;
	}
	public String getS() {
		return s;
	}
	public void setS(String s) {
		this.s = s;
	}
	public int getStep() {
		return step;
	}
	public void setStep(int step) {
		this.step = step;
	}
}
