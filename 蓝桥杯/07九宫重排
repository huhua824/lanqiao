题目描述
如下面第一个图的九宫格中，放着  1~8  的数字卡片，还有一个格子空着。与空格子相邻的格子中的卡片可以移动到空格中。经过若干次移动，可以形成第二个图所示的局面。

1 2 3             1 2 3
4 5 6               4 6
7 8               7 5 8

我们把第一个图的局面记为：12345678.
把第二个图的局面记为：123.46758
显然是按从上到下，从左到右的顺序记录数字，空格记为句点。
本题目的任务是已知九宫的初态和终态，求最少经过多少步的移动可以到达。如果无论多少步都无法到达，则输出-1。
输入
输入第一行包含九宫的初态，第二行包含九宫的终态。 
输出
输出最少的步数，如果不存在方案，则输出-1。
样例输入
12345678. 
123.46758 
样例输出
3


代码：
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main{
    public static void main(String[] args) {
    Scanner input=new Scanner (System.in);
    //用于保存之前状态，key代表状态字符串，value代表到key状态所用的最小步数 
    HashMap<String,Integer> map=new HashMap<String,Integer>();
    //用于保持移动后的状态字符串，先进先出
    Queue<String> list=new LinkedList<String>();
    String first=input.next();//开始字符串
    String end=input.next();//结束字符串
    map.put(first, 0);
    list.offer(first);
    int result=-1;
    int d[] = {-3,3,-1,1};//上下左右
    while(result==-1) {
    	String front=list.poll();//删除list中第一个，并赋值给front
    	int index=front.indexOf(".");//查询"."的下标
    	for(int i=0;i<=3;i++) {
    		int temp=index+d[i];//上下左右移动后的下标
    		if(temp<=8&&temp>=0&&(temp%3==index%3||temp/3==index/3)) {
    			//要排除掉下标2和3，5和6交换
    			String change=front.replace('.', '*');
    			change=change.replace(front.charAt(temp), '.');
    			change=change.replace('*',front.charAt(temp));
    			//判断交换后是否是结束后的字符串
    			if(change.equals(end)) {
    				result=map.get(front)+1;
    			}
    			//判断map里面是否已经包含change
    			if(!map.containsKey(change)) {
    				map.put(change,map.get(front)+1);//将移动后的字符串和步数添加进map
    				list.add(change);//将移动后的字符串添加进list
    			}
    		}
    	}
      }
    	System.out.println(result);
    }
}  



public class Main{
	static String start;
	static String end;
	static int[] dir={-3,3,-1,1};
	static int n,m;
	static LinkedList<String> list;
	public  static void main(String[] args) {
		Scanner input=new Scanner(System.in);
		start=input.next();
		end=input.next();
		list=new LinkedList<String>();
		System.out.println(new Main().bfs());
	}
	class Node{
		String s;
		int d;
		public Node(String s,int d) {
			this.s=s;
			this.d=d;
		}
	}
	public int bfs() {
		Queue<Node> q=new LinkedList<Node>();
 		q.offer(new Node(start,0));
 		list.add(start);
		while(!q.isEmpty()) {
		    Node now=q.poll();
		    int index=now.s.indexOf(".");
		    for(int i=0;i<4;i++) {
		    	 int temp=index+dir[i];
		    	if(in(temp,index)){
		    		String change=now.s.replace('.', '*');
	    			change=change.replace(now.s.charAt(temp), '.');
	    			change=change.replace('*',now.s.charAt(temp));
	    			if(change.equals(end)) {
	    				return now.d+1;
	    			}
	    			if(!list.contains(change)) {
	    				//System.out.println(change);
	    				q.offer(new Node(change,now.d+1));
	    				list.add(change);
	    			}
		    	}
		    }
		}
		return -1;
	}
	static boolean in(int temp,int index) {
		return temp<=8&&temp>=0&&(temp%3==index%3||temp/3==index/3);
	}
	
}


