题目描述
若一个数（首位不为零）从左向右读与从右向左读都一样，我们就将其称之为回文数。
例如：给定一个10进制数56，将56加65（即把56从右向左读），得到121是一个回文数。

又如：对于10进制数87：
STEP1：87+78  =  165  STEP2：165+561  =  726
STEP3：726+627  =  1353  STEP4：1353+3531  =  4884

在这里的一步是指进行了一次N进制的加法，上例最少用了4步得到回文数4884。

写一个程序，给定一个N（2< =N< =10或N=16）进制数M（其中16进制数字为0-9与A-F），求最少经过几步可以得到回文数。
如果在30步以内（包含30步）不可能得到回文数，则输出“Impossible!”
输入
两行，N与M 
输出
如果能在30步以内得到回文数，输出“STEP=xx”（不含引号），其中xx是步数；否则输出一行”Impossible!”（不含引号）
样例输入
9 
87 
样例输出
STEP=6

代码：
import java.util.Scanner;

public class 回文数 {
	public static void main(String[] args) {
		Scanner input=new Scanner(System.in);
		int n=input.nextInt();
		String s=input.next();
		int ans=0;
		while(!isNum(s)) {
			String ss=reverse(s);
			long a1=Long.valueOf(s, n);
			long a2=Long.valueOf(ss,n);
			long a3=a1+a2;
			s=Long.toString(a3, n);
			ans++;
			if(ans>30) {
				System.out.println("Impossible!");
                break;
			}
			if(isNum(s)) {
				 System.out.println("STEP="+ans);
	                break;
			}
		}
	}
	static boolean isNum(String s) {
		int mid=s.length()/2;
		for(int i=0,j=s.length()-1;i<mid;i++,j--) {
			if(s.charAt(i)!=s.charAt(j)) {
				return false;
			}
		}
		return true;
	}
	static String reverse(String s) {
		StringBuffer sb=new StringBuffer(s);
		return sb.reverse().toString();
	}
}
