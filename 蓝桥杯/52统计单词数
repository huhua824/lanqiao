题目描述
统计输入英文文章段落中不同单词（单词有大小写之分,　　但统计时忽略大小写）各自出现的次数。  输入段落中所含单词的总数不超过100，最长单词的长度不超过20个字母.
输入
一个包含若干句子的段落,  每个句子由若干英文单词组成.  除空格,　　逗号和句号外,  这些输入的句子中不含其他非字母字符,  并且,  逗号和句号紧跟在它前面的英文单词后面,  中间没有空格.  段落最后一个字符是回车符,　　表示输入结束. 
输出
若段落中共有M个不同的英文单词，则按照其在段落中出现的先后顺序输出M行，各行的格式为:　　单词中所有字母均用大写形式输出（最长的单词顶格输出，它前面没有多余的空格;　　其余单词与其右对齐）+冒号+N个*号+该单词在段落中的出现次数N 
样例输入
This  is  a  test.  This  test  is  easy.  This  is  a  test.  This  test  is  easy. 
样例输出
THIS:****4
  IS:****4
   A:**2
TEST:****4
EASY:**2

代码：
public class Main{
	public static void main(String[] args) {
		Scanner input=new Scanner(System.in);
		while(input.hasNext()) {
			funtion(input.nextLine());
		}
	}
	static void funtion(String s) {
		String[] strs=s.split("\\W+");
		Map<String, Integer> map = new LinkedHashMap<String, Integer>();		int maxLength=1;
		for(String str:strs) {
			String key=str.toUpperCase();
			if(map.containsKey(key)) {
				int length=map.get(key)+1;
				map.put(key, length);
			}else {
				map.put(key, 1);
				if(key.length()>maxLength) {
					maxLength=key.length();
				}
			}
		}
		for(String str:map.keySet()) {
			int length=map.get(str);
			String prime=String.format("%"+maxLength+"s:", str);
			for(int i=0;i<length;i++) {
				prime+="*";
			}
			System.out.println(prime+length);
		}
	}
}
