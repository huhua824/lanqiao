题目描述
回文串，是一种特殊的字符串，它从左往右读和从右往左读是一样的。小龙龙认为回文串才是完美的。现在给你一个串，它不一定是回文的，请你计算最少的交换次数使得该串变成一个完美的回文串。

交换的定义是：交换两个相邻的字符

例如mamad

第一次交换  ad  :  mamda

第二次交换  md  :  madma

第三次交换  ma  :  madam  (回文！完美！)

输入
第一行是一个整数N，表示接下来的字符串的长度(N  < =  8000) 

第二行是一个字符串，长度为N.只包含小写字母 
输出
如果可能，输出最少的交换次数。 

否则输出Impossible 
样例输入
5 

mamad 
样例输出
3
代码：
public class Main{
	public static void main(String[] args) {
		Scanner input=new Scanner(System.in);
		int n=input.nextInt();
		char[] a=new char[n];
		String s=input.next();
		a=s.toCharArray();
		int j=n-1,k=0,t=0;//字符串最后一个字符，交换次数，判读是否已经有一个单独的奇数的个数 
	    int i,f,h;
	    char p;
	    for(i=0;i<j;i++){//从第一个字符到倒数第二个字符遍历 
	        for(f=j;f>=i;f--){//从最后一个开始，到第i个字符，寻找与a[i]相同的字符
	            if(i==f){//如果没找到 ,说明存在奇数的情况。
	                if(n%2==0 || t==1){//不可能的两种情况
	                    System.out.println("Impossible");
	                    return ;
	                }
	                t=1;//找到一个字符出现的次数为奇数 
	                k=k+(n/2-i);//将次字符交换到中间位置的次数
	            }else if(a[i]==a[f]){//如果找到了，将a[f]交换到a[end]位置 
	                for(h=f;h<j;h++){//交换相邻两个位置的字符
	                    p=a[h];a[h]=a[h+1];a[h+1]=p;//交换字符串 
	                    k++;
	                }
	                j--;//末尾递减 
	                break;//开始从i+1处重复操作
	            }
	        }
	    }
	    System.out.println(k);
	}
}
